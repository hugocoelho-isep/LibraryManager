pipeline {
    agent any

    environment {
        // Define any environment variables needed
        //MAVEN_HOME = tool 'M3'  // Assuming you have defined Maven in Jenkins Global Tools
        //JAVA_HOME = tool 'JDK11' // Adjust to the correct JDK version

        // LINUX
        //MAVEN_HOME = '/usr/local/apache-maven'
        //JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'

        // WINDOWS
        MAVEN_HOME = 'C:\\Maven\\apache-maven-3.9.9'
        JAVA_HOME = 'C:\\Program Files\\Java\\jdk-17'

        // macOS
        //MAVEN_HOME = '/usr/local/apache-maven'
        //JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk-11.0.11.jdk/Contents/Home'

        // Define the GitHub repository URL as an environment variable
        GITHUB_URL = 'https://github.com/hugocoelho-isep/LibraryManager.git'
        GITHUB_BRANCH = 'main'
        GITHUB_ID = '22c33e88-6dc6-44e0-93bc-dd93dc7f0e31'
    }

 stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git url: "${GITHUB_URL}", branch: "${GITHUB_BRANCH}", credentialsId: "${GITHUB_ID}"
            }
        }

        stage('Build') {
            steps {
                // Clean, compile, and package the application using Maven
                bat "${MAVEN_HOME}/bin/mvn clean install"
            }
        }
        stage('Validate') {
            steps {
                // Validate the project structure
                bat "${MAVEN_HOME}/bin/mvn validate"
            }
        }

        stage('Compile') {
            steps {
                // Compile the source code
                bat "${MAVEN_HOME}/bin/mvn compile"
            }
        }

        stage('Test') {
            steps {
                // Run unit tests with Maven
                bat "${MAVEN_HOME}/bin/mvn test"
            }
        }

        stage('Package') {
            steps {
                // Package the application into a JAR or WAR
                bat "${MAVEN_HOME}/bin/mvn package"
            }
        }

        stage('Deploy') {
            steps {
                // Use the SSH key with the specified credentials ID
                sshagent(['7eb36415-50fb-4aae-a98f-6635a04b00a6']) {

                    // Stop the old version of the application running on port 2228
                    script {
                        echo "Stopping old application version..."
                        bat """
                        ssh -o StrictHostKeyChecking=no -p 10864 root@vsgate-ssh.dei.isep.ipp.pt '
                            # Find the PID of the process running on port 2228 and kill it
                            pid=\$(lsof -ti:2228)
                            if [ ! -z "\$pid" ]; then
                                echo "Killing process ID: \$pid on port 2228"
                                kill -9 \$pid
                            else
                                echo "No process found running on port 2228."
                            fi
                        '
                        """
                    }

                    // Secure copy of the JAR file to the server
                    script {
                        echo "Copying new JAR to the server..."
                        bat """
                        pscp -P 10864 target/psoft-g1-0.0.1-SNAPSHOT.jar root@vsgate-ssh.dei.isep.ipp.pt:/usr/local/librarymanager
                        """
                    }

                    // Deploy the new application version
                    script {
                        echo "Deploying application..."
                        bat """
                        ssh -o StrictHostKeyChecking=no -p 10864 root@vsgate-ssh.dei.isep.ipp.pt '
                            nohup java -jar /usr/local/librarymanager/psoft-g1-0.0.1-SNAPSHOT.jar --server.port=2228 > /dev/null 2>&1 &
                        '
                        """
                    }
                }
        }

    }

}